// Generated by gencpp from file template_algo/GraspPredictionResponse.msg
// DO NOT EDIT!


#ifndef TEMPLATE_ALGO_MESSAGE_GRASPPREDICTIONRESPONSE_H
#define TEMPLATE_ALGO_MESSAGE_GRASPPREDICTIONRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <template_algo/Grasp.h>

namespace template_algo
{
template <class ContainerAllocator>
struct GraspPredictionResponse_
{
  typedef GraspPredictionResponse_<ContainerAllocator> Type;

  GraspPredictionResponse_()
    : success(false)
    , best_grasp()  {
    }
  GraspPredictionResponse_(const ContainerAllocator& _alloc)
    : success(false)
    , best_grasp(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _success_type;
  _success_type success;

   typedef  ::template_algo::Grasp_<ContainerAllocator>  _best_grasp_type;
  _best_grasp_type best_grasp;





  typedef boost::shared_ptr< ::template_algo::GraspPredictionResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::template_algo::GraspPredictionResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GraspPredictionResponse_

typedef ::template_algo::GraspPredictionResponse_<std::allocator<void> > GraspPredictionResponse;

typedef boost::shared_ptr< ::template_algo::GraspPredictionResponse > GraspPredictionResponsePtr;
typedef boost::shared_ptr< ::template_algo::GraspPredictionResponse const> GraspPredictionResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::template_algo::GraspPredictionResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::template_algo::GraspPredictionResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::template_algo::GraspPredictionResponse_<ContainerAllocator1> & lhs, const ::template_algo::GraspPredictionResponse_<ContainerAllocator2> & rhs)
{
  return lhs.success == rhs.success &&
    lhs.best_grasp == rhs.best_grasp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::template_algo::GraspPredictionResponse_<ContainerAllocator1> & lhs, const ::template_algo::GraspPredictionResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace template_algo

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::template_algo::GraspPredictionResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::template_algo::GraspPredictionResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::template_algo::GraspPredictionResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::template_algo::GraspPredictionResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::template_algo::GraspPredictionResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::template_algo::GraspPredictionResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::template_algo::GraspPredictionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "86d7d0d5a00535c6699247df54f62820";
  }

  static const char* value(const ::template_algo::GraspPredictionResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x86d7d0d5a00535c6ULL;
  static const uint64_t static_value2 = 0x699247df54f62820ULL;
};

template<class ContainerAllocator>
struct DataType< ::template_algo::GraspPredictionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "template_algo/GraspPredictionResponse";
  }

  static const char* value(const ::template_algo::GraspPredictionResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::template_algo::GraspPredictionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool success\n"
"template_algo/Grasp best_grasp\n"
"\n"
"\n"
"================================================================================\n"
"MSG: template_algo/Grasp\n"
"geometry_msgs/Pose pose\n"
"float32 width\n"
"float32 quality\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::template_algo::GraspPredictionResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::template_algo::GraspPredictionResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.success);
      stream.next(m.best_grasp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GraspPredictionResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::template_algo::GraspPredictionResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::template_algo::GraspPredictionResponse_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "best_grasp: ";
    Printer< ::template_algo::Grasp_<ContainerAllocator> >::stream(s, indent + "  ", v.best_grasp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TEMPLATE_ALGO_MESSAGE_GRASPPREDICTIONRESPONSE_H
