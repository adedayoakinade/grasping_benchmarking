// Generated by gencpp from file benchmarking_msgs/GripperCommandRequest.msg
// DO NOT EDIT!


#ifndef BENCHMARKING_MSGS_MESSAGE_GRIPPERCOMMANDREQUEST_H
#define BENCHMARKING_MSGS_MESSAGE_GRIPPERCOMMANDREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace benchmarking_msgs
{
template <class ContainerAllocator>
struct GripperCommandRequest_
{
  typedef GripperCommandRequest_<ContainerAllocator> Type;

  GripperCommandRequest_()
    : width(0.0)  {
    }
  GripperCommandRequest_(const ContainerAllocator& _alloc)
    : width(0.0)  {
  (void)_alloc;
    }



   typedef float _width_type;
  _width_type width;





  typedef boost::shared_ptr< ::benchmarking_msgs::GripperCommandRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::benchmarking_msgs::GripperCommandRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GripperCommandRequest_

typedef ::benchmarking_msgs::GripperCommandRequest_<std::allocator<void> > GripperCommandRequest;

typedef boost::shared_ptr< ::benchmarking_msgs::GripperCommandRequest > GripperCommandRequestPtr;
typedef boost::shared_ptr< ::benchmarking_msgs::GripperCommandRequest const> GripperCommandRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::benchmarking_msgs::GripperCommandRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::benchmarking_msgs::GripperCommandRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::benchmarking_msgs::GripperCommandRequest_<ContainerAllocator1> & lhs, const ::benchmarking_msgs::GripperCommandRequest_<ContainerAllocator2> & rhs)
{
  return lhs.width == rhs.width;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::benchmarking_msgs::GripperCommandRequest_<ContainerAllocator1> & lhs, const ::benchmarking_msgs::GripperCommandRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace benchmarking_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::benchmarking_msgs::GripperCommandRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::benchmarking_msgs::GripperCommandRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::benchmarking_msgs::GripperCommandRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::benchmarking_msgs::GripperCommandRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::benchmarking_msgs::GripperCommandRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::benchmarking_msgs::GripperCommandRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::benchmarking_msgs::GripperCommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ceb3374c4c9de569f66ba7b628c0b46b";
  }

  static const char* value(const ::benchmarking_msgs::GripperCommandRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xceb3374c4c9de569ULL;
  static const uint64_t static_value2 = 0xf66ba7b628c0b46bULL;
};

template<class ContainerAllocator>
struct DataType< ::benchmarking_msgs::GripperCommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "benchmarking_msgs/GripperCommandRequest";
  }

  static const char* value(const ::benchmarking_msgs::GripperCommandRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::benchmarking_msgs::GripperCommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 width\n"
;
  }

  static const char* value(const ::benchmarking_msgs::GripperCommandRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::benchmarking_msgs::GripperCommandRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.width);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GripperCommandRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::benchmarking_msgs::GripperCommandRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::benchmarking_msgs::GripperCommandRequest_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "width: ";
    Printer<float>::stream(s, indent + "  ", v.width);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BENCHMARKING_MSGS_MESSAGE_GRIPPERCOMMANDREQUEST_H
